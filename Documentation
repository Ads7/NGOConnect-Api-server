MongoDB Integration with our server, Using MongoJS module.

-----------------------------------------------------------------------------------------------------------------------------------------------
Why MongoDB?

1. MongoDB is a database but is not in SQL family of databases, i.e. its not a relational database(RDB),
2. MongoDB is a document oriented database, that is it stores structured data as JSON like documents with dynamic schemas. Instead of storing data in tables, which is 		what RDB's do.
3. Pass a JSON object, it stores them easily without predefining the schema(the fact that it takes JSON objects directly makes it ideal for NODEJS), this data 			 flexibility has made MongoDB important.


-----------------------------------------------------------------------------------------------------------------------------------------------

Steps to setup MongoDB server:

1. Download and install your OS specific bundle from: http://mongodb.org/downloads
2. For ubuntu : $ sudo apt-get install mongodb
2. Launch MongoDB : $ (sudo) mongod



------------------------------------------------------------------------------------------------------------------------------------------------

Integration with our Server:
Using the module -> MongoJS.


1. MongoJS is a very simple wrapper for MongoDB driver for NODEJS, it mimics the actual MongoDB Api very closely, i.e almost all of the commands are same as in the 	mongodb terminal.
2. Grab MongoJS dependency : npm install mongojs
3. Require MongoJS and assign it to an object, var db = require('mongojs');.
4. Now, db.connect(dburl, collections); //here dburl = "localhost/ourdatabasename" and collections: similar to tables RDB, used to group similar data together.

Try out mongoDB without NodeJs: 

5. !open a new terminal! To construct a database to use in url, first go to terminal and type "mongo newdatabasename", this will create your new database. Type help in mongo interpreter for various commands.
6. Some basic commands for the Mongo interpreter: 
	>show dbs
	>show collections  -> show existing collections in a database
	>db.xyz.save({'firstname':'hemant', 'lastname': 'kumar'}) -> save to the collection 'xyz'
	>show collections  -> result : xyz
	>db.xyz.find()     -> finds all the records in a collection. (additional _ID field-> mongodb generates a unique id for every entry, similar to primary key in RDB)
	>db.xyz.drop()     -> remove a collection

7. For doing the same using NodeJs see: mongojs.example.js 
	understand the code, after that run it with $ node mongojs.example.js
	once it returns a success msg, exit it using ctr+c, and checkout 
	$ mongo mydb
	$ db.xyz.find()
	you'll find a new entry with the name-> namrata.
